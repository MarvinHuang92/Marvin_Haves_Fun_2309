#!/usr/bin/env python3
# -*- coding: utf-8 -*-

' description of this module '

__author__ = 'Marvin Huang'

import math

class Vector2(object):
    def __init__(self, x=0.0, y=0.0):
        self.x = x
        self.y = y
    def __str__(self):
        return "(%s, %s)"%(self.x, self.y)
	# 定义取幅值
    def get_magnitude(self):
        return math.sqrt( self.x**2 + self.y**2 )
	# 定义正则化（单位化）
    def normalize(self):
        magnitude = self.get_magnitude()
        self.x /= magnitude
        self.y /= magnitude
    # 定义四则运算，其中rhs应该也是一个向量类型
	# 由于鸭子类型存在，Python不会去检查它是不是真的向量类型，只要它有x,y两个属性可供调用就可以了
    def __add__(self, rhs):
        return Vector2(self.x + rhs.x, self.y + rhs.y)
    def __sub__(self, rhs):
        return Vector2(self.x - rhs.x, self.y - rhs.y)
    def __mul__(self, scalar):
        return Vector2(self.x * scalar, self.y * scalar)
    def __div__(self, scalar):
        return Vector2(self.x / scalar, self.y / scalar)
 
    @classmethod
    def from_points(cls, P1, P2):
        return cls( P2[0] - P1[0], P2[1] - P1[1] )
		# 这里的cls是指代类本身，所以from_points方法返回的是Vector2这个类的一个新实例
		# 注意由于cls后面括号里有参数，需要在__init__方法里面预留两个参数的位置
		# 这个实例的出现激活了__init__方法，于是产生了self.x和self.y的值
		# 又因为类有__str__定义，而且将self.x和self.y传入，所以print会打印出一个字符串


#我们可以使用下面的方法来计算两个点之间的向量
A = (10.0, 20.0)
B = (30.0, 35.0)
AB = Vector2.from_points(A, B)
# 这里生成的AB就是一个Vector2的实例，所以可以直接对这个实例使用get_magnitude方法
ABm = AB.get_magnitude()
print (AB)
print (ABm)
# 或者直接定义一个Vector2的实例，对这个实例使用get_magnitude方法，效果一样
s = Vector2(20, 15)
Sm = s.get_magnitude()
print (Sm)
