#!/usr/bin/env python3
# -*- coding: utf-8 -*-

' 操作说明：支持键盘WASD或者方向键控制，或者鼠标左右转向，左右键前进后退 '

__author__ = 'Marvin Huang'

background_image_filename = 'sushiplate.jpg'
sprite_image_filename = 'fugu.png'
 
import pygame
from pygame.locals import *
from sys import exit
from Vec2d import Vec2d
from math import *
 
pygame.init()
 
screen = pygame.display.set_mode((640, 480), 0, 32)
 
background = pygame.image.load(background_image_filename).convert()
sprite = pygame.image.load(sprite_image_filename).convert_alpha()
 
clock = pygame.time.Clock()

# 让pygame完全控制鼠标，鼠标不会显示，也不会超出窗口范围，但无法用鼠标退出游戏
pygame.mouse.set_visible(True)
pygame.event.set_grab(True)
 
sprite_pos = Vec2d(200, 150)   # 初始位置
sprite_speed = 300.     # 每秒前进的像素数（速度）
sprite_rotation = 0.      # 初始角度
sprite_rotation_speed = 180. # 每秒转动的角度数（转速）
 
while True:
 
    for event in pygame.event.get():
        if event.type == QUIT:
            exit()
        # 由于鼠标失效，需要按Esc则退出游戏
        if event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                exit()
 
    pressed_keys = pygame.key.get_pressed()

    # 这里获取鼠标的按键情况
    pressed_mouse = pygame.mouse.get_pressed()
 
    rotation_direction = 0.
    movement_direction = 0.

    # 通过移动偏移量计算转动(作为键盘左右键的补充)
    rotation_direction = pygame.mouse.get_rel()[0]/2.0
 
    # 更改角度（可以用方向键也可以用wasd）
    if pressed_keys[K_LEFT]:
        rotation_direction = +1.
    if pressed_keys[K_a]:
        rotation_direction = +1.
    if pressed_keys[K_RIGHT]:
        rotation_direction = -1.
    if pressed_keys[K_d]:
        rotation_direction = -1.
    # 前进、后退
    if pressed_keys[K_UP]:
        movement_direction = -1.
    if pressed_keys[K_w]:
        movement_direction = -1.
    if pressed_keys[K_DOWN]:
        movement_direction = +1.
    if pressed_keys[K_s]:
        movement_direction = -1.
    # 多了一个鼠标左键按下的判断
    if pressed_keys[K_UP] or pressed_mouse[0]:
        movement_direction = -1.
    # 多了一个鼠标右键按下的判断
    if pressed_keys[K_DOWN] or pressed_mouse[2]:
        movement_direction = +1.
 
    screen.blit(background, (0,0))
 
    # 获得一条转向后的鱼
    rotated_sprite = pygame.transform.rotate(sprite, sprite_rotation)
    # 转向后，图片的长宽会变化，因为图片永远是矩形，为了放得下一个转向后的矩形，外接的矩形势必会比较大
    w1, h1 = sprite.get_size()
    w, h = rotated_sprite.get_size()
    # 获得绘制图片的左上角（感谢pltc325网友的指正）
    sprite_draw_pos = Vec2d(sprite_pos.x-w/2, sprite_pos.y-h/2)
    screen.blit(rotated_sprite, sprite_draw_pos)
 
    time_passed = clock.tick()
    time_passed_seconds = time_passed / 1000.0
 
    # 图片的转向速度也需要和行进速度一样，通过时间来控制
    sprite_rotation += rotation_direction * sprite_rotation_speed * time_passed_seconds
 
    # 获得前进（x方向和y方向），这两个需要一点点三角的知识
    heading_x = sin(sprite_rotation*pi/180.)
    heading_y = cos(sprite_rotation*pi/180.)
    # 转换为单位速度向量
    heading = Vec2d(heading_x, heading_y)
    # 转换为速度
    heading *= movement_direction
 
    sprite_pos += heading * sprite_speed * time_passed_seconds

    # 防止小鱼超出边框范围
    if sprite_pos.x < 0 + w1/2:
        sprite_pos.x = 0 + w1/2
    if sprite_pos.x > 640 - w1/2:
        sprite_pos.x = 640 - w1/2
    if sprite_pos.y < 0 + h1/2:
        sprite_pos.y = 0 + h1/2 
    if sprite_pos.y > 480 - h1/2 :
        sprite_pos.y = 480 - h1/2
 
    pygame.display.update()