# -*- coding: utf-8 -*-

# 该函数需要一个参数n，表示输出杨辉三角的前n行
def triangles(n=10): # 提供默认值10，因为下面的题目要求里面没有给出10

	if isinstance(n,int) == False:
		raise TypeError('请输入一个正整数！')
	
	if n < 1:
		raise TypeError('请输入一个正整数！')

	L = [1,0] # 初始化L，M列表，之所以用两个，因为后面逐一计算加法的时候需要M暂时“另存为”，不改变原来的L
	M = [1,0]
	if n == 1:
		yield [1]
	if n > 1:
		yield [1]
		for a in range (2,n+1): # 截断L，a=2时截断到序号1，也就是包含L[0],L[1]两个元素
			L.append(0)
			M.append(0)
			for b in range (1,a+1): # 逐一累加
				M[b] = L[b-1] + L[b]
			L = M[:] # 此处不能直接令L=M，而是要里面的元素对应相等，可以利用全切片将M复制一个给L
			T = L[:a]
			yield T



# 期待输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
n = 0
results = []
for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10: # 这里有了10次循环的限制，如果需要生成更多行数，要修改这里的数值
        break
if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')